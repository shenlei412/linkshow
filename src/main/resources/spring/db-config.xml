<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:osgi="http://www.springframework.org/schema/osgi"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">

	<bean id="dataSourceScs" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${db.driverClassName}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.user}" />
		<property name="password" value="${db.password}" />
		<property name="maxActive" value="${db.maxActive}" />
		<property name="maxIdle" value="${db.maxIdle}" />
		<property name="maxWait" value="${db.maxWait}" />
		<property name="removeAbandoned" value="${db.removeAbandoned}" />
		<property name="validationQuery">
			<value>SELECT 1 from dual</value>
		</property>
		<property name="testOnBorrow">
			<value>false</value>
		</property>
	</bean>

	<bean id="dataSource" class="com.easylinkin.linkshow.common.datasource.DynamicRountingDataSource">
	    <property name="defaultTargetDataSource" ref="dataSourceScs" />
	    <property name="targetDataSources">
	        <map key-type="java.lang.String">
	            <entry key="SCS" value-ref="dataSourceScs"/>
	            <!-- 这里还可以加多个dataSource -->
	        </map>
	    </property>
	</bean>   

	<!-- 使用SqlSessionFactoryBean工厂产生SqlSessionFactory对象， 方便后期注入Dao -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
 		<property name="mapperLocations" value="classpath*:mybatis/**/*.xml"/>
 	</bean>

	<!-- 会自动将basePackage中配置的包路径下的所有带有@Mapper标注的Dao层的接口生成代理，替代原来我们的Dao实现。 -->
	<bean id="MapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.easylinkin.linkshow.*.dao" />
	</bean>

</beans>
